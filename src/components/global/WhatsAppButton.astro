---
import { Image } from 'astro:assets';
import { modalFlow, WHATSAPP_PHONE_NUMBER } from '@/data/whatsappModalFlow.ts';

const initialScreenIdConst = modalFlow[0]?.id || 's1';
const modalFlowJSON = JSON.stringify(modalFlow);
const whatsappPhoneNumberConst = WHATSAPP_PHONE_NUMBER;
---

<div id='interactive-modal-widget-container' class='fixed bottom-3 left-3 z-[3001] print:hidden sm:bottom-4 sm:left-4'>
	<button
		id='interactive-modal-toggle-btn'
		aria-label='How can we help? Open interactive assistant'
		class='group z-[3001] relative cursor-pointer overflow-hidden rounded-full border-none bg-transparent p-0 shadow-lg transition-all duration-300 hover:shadow-xl active:scale-95'>
		<div class='absolute inset-0 rounded-full bg-gradient-to-br from-green-400 to-green-600 opacity-0 transition-opacity duration-300 group-hover:opacity-20'></div>
		<Image 
			height={48} 
			width={48} 
			src='/icons/WhatsApp.svg.webp' 
			alt='Open interactive assistant' 
			class='relative z-[6006] rounded-full transition-transform duration-300 group-hover:scale-110 sm:h-14 sm:w-14' 
		/>
		<div class='absolute -inset-1 rounded-full bg-gradient-to-br from-green-400 to-green-600 opacity-20 blur-sm transition-opacity duration-300 group-hover:opacity-40'></div>
	</button>

	<div
		id='modal-overlay'
		class='pointer-events-none fixed inset-0 z-[3002] bg-black/20 backdrop-blur-sm transition-all duration-300'
		style='display: none; opacity: 0;'
		role='dialog'
		aria-modal='true'
		aria-labelledby='modal-heading'>
		<!-- Modal Content -->
		<div
			id='modal-content-wrapper'
			class='pointer-events-auto absolute flex max-h-[85vh] w-[calc(100vw-1.5rem)] max-w-sm scale-90 transform flex-col rounded-2xl border border-gray-200/80 bg-white/95 text-gray-800 opacity-0 shadow-2xl backdrop-blur-xl transition-all duration-300 sm:max-w-md'
			style='bottom: 60px; left: 0.75rem;'>
			
			<!-- Modal Header -->
			<div class='flex items-center justify-between rounded-t-2xl border-b border-gray-200/50 bg-gradient-to-r from-gray-50/80 to-gray-100/80 p-3 backdrop-blur-sm sm:p-4'>
				<h3 id='modal-heading' class='text-base font-semibold text-gray-800 sm:text-lg'>
					{/* Heading will be set by JS */}
				</h3>
				<button
					id='modal-close-btn'
					type='button'
					class='group ml-auto inline-flex h-7 w-7 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 transition-all duration-200 hover:bg-gray-200/80 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300/50 sm:h-8 sm:w-8'
					aria-label='Close modal'>
					<svg class='h-4 w-4 transition-transform duration-200 group-hover:scale-110 sm:h-5 sm:w-5' fill='currentColor' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'>
						<path
							fill-rule='evenodd'
							d='M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z'
							clip-rule='evenodd'>
						</path>
					</svg>
				</button>
			</div>

			<!-- Modal Body -->
			<div id='modal-body-content' class='flex-1 space-y-3 overflow-y-auto p-3 sm:space-y-4 sm:p-4'>
				<p id='modal-subheading' class='text-xs italic text-gray-500 sm:text-sm' style='display: none;'></p>
				<p id='modal-question' class='text-sm leading-relaxed text-gray-600 sm:text-base' style='display: none;'></p>

				<div id='modal-info-content-area' class='prose prose-sm max-w-none text-gray-600' style='display: none;'>
					{/* Info content will be set by JS */}
				</div>

				<div id='modal-options-area' style='display: none;'>
					<ul id='modal-options-list' class='space-y-2'>
						{/* Options will be generated by JS */}
					</ul>
				</div>

				<div id='modal-text-input-area' style='display: none;'>
					<label
						id='modal-input-label'
						for='modal-text-input-field'
						class='mb-2 block text-sm font-medium text-gray-700'
						style='display: none;'>
					</label>
					<textarea
						id='modal-text-input-field'
						rows='3'
						class='block w-full rounded-lg border border-gray-300/60 bg-white/80 p-2.5 text-sm text-gray-800 placeholder-gray-400 backdrop-blur-sm transition-all duration-200 focus:border-sky-500 focus:bg-white focus:ring-2 focus:ring-sky-500/20 sm:text-base'
						placeholder='Type here...'>
					</textarea>
					<button
						id='modal-text-input-submit-btn'
						class='mt-3 w-full rounded-lg bg-gradient-to-r from-green-600 to-green-700 px-4 py-2.5 text-sm font-medium text-white shadow-md transition-all duration-200 hover:from-green-700 hover:to-green-800 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-green-500/50 focus:ring-offset-2 active:scale-[0.98] disabled:cursor-not-allowed disabled:opacity-60 disabled:hover:from-green-600 disabled:hover:to-green-700 sm:text-base'>
						{/* Button text will be set by JS */}
					</button>
					<button
						id='modal-text-input-back-btn'
						class='mt-2 w-full rounded-lg bg-gradient-to-r from-gray-500 to-gray-600 px-4 py-2.5 text-left text-sm font-medium text-white shadow-md transition-all duration-200 hover:from-gray-600 hover:to-gray-700 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400/50 focus:ring-offset-2 active:scale-[0.98] sm:text-base'>
						‚Üê Go Back
					</button>
				</div>
			</div>
		</div>
	</div>
</div>

<script define:vars={{ modalFlowData: modalFlowJSON, whatsappNumData: whatsappPhoneNumberConst, initialScreenIdData: initialScreenIdConst }}>
	document.addEventListener('DOMContentLoaded', () => {
		const modalFlow = JSON.parse(modalFlowData);
		const WHATSAPP_PHONE_NUMBER = whatsappNumData;
		const initialScreenId = initialScreenIdData;

		let currentScreenId = initialScreenId;
		let userInput = '';
		let selectedChallengeType = '';
		let isOpen = false;

		const toggleBtn = document.getElementById('interactive-modal-toggle-btn');
		const overlay = document.getElementById('modal-overlay');
		const modalWrapper = document.getElementById('modal-content-wrapper');
		const closeBtn = document.getElementById('modal-close-btn');

		const headingEl = document.getElementById('modal-heading');
		const subheadingEl = document.getElementById('modal-subheading');
		const questionEl = document.getElementById('modal-question');

		const infoContentArea = document.getElementById('modal-info-content-area');
		const optionsArea = document.getElementById('modal-options-area');
		const optionsList = document.getElementById('modal-options-list');

		const textInputArea = document.getElementById('modal-text-input-area');
		const inputLabelEl = document.getElementById('modal-input-label');
		const inputField = document.getElementById('modal-text-input-field');
		const inputSubmitBtn = document.getElementById('modal-text-input-submit-btn');
		const inputBackBtn = document.getElementById('modal-text-input-back-btn');

		function getCurrentScreen() {
			return modalFlow.find((screen) => screen.id === currentScreenId) || modalFlow[0];
		}

		function resetModalState() {
			currentScreenId = initialScreenId;
			userInput = '';
			selectedChallengeType = '';
			if (inputField) inputField.value = '';
		}

		function positionModal() {
			if (!toggleBtn || !modalWrapper) return;

			const btnRect = toggleBtn.getBoundingClientRect();
			const viewportWidth = window.innerWidth;
			const viewportHeight = window.innerHeight;

			// For mobile, center the modal
			if (viewportWidth < 640) { // sm breakpoint
				const leftPosition = (viewportWidth - modalWrapper.offsetWidth) / 2;
				const bottomPosition = viewportHeight - btnRect.top + 15;
				
				modalWrapper.style.position = 'fixed';
				modalWrapper.style.left = `${Math.max(12, leftPosition)}px`;
				modalWrapper.style.bottom = `${bottomPosition}px`;
			} else {
				// Desktop positioning
				let leftPosition = btnRect.right + 15;
				const modalRect = modalWrapper.getBoundingClientRect();

				if (leftPosition + modalRect.width > viewportWidth - 20) {
					leftPosition = btnRect.left - modalRect.width - 15;
				}
				if (leftPosition < 20) {
					leftPosition = Math.max(20, (viewportWidth - modalRect.width) / 2);
				}

				const bottomPosition = viewportHeight - btnRect.top + 15;

				modalWrapper.style.position = 'fixed';
				modalWrapper.style.left = `${leftPosition}px`;
				modalWrapper.style.bottom = `${bottomPosition}px`;
			}

			modalWrapper.style.top = 'auto';
		}

		function openModal() {
			isOpen = true;
			resetModalState();
			renderScreen();
			if (overlay) {
				overlay.style.display = 'block';
				requestAnimationFrame(() => {
					overlay.style.opacity = '1';
				});
			}
			if (modalWrapper) {
				positionModal();
				requestAnimationFrame(() => {
					modalWrapper.style.opacity = '1';
					modalWrapper.style.transform = 'scale(1)';
				});
			}
		}

		function closeModal() {
			isOpen = false;
			if (modalWrapper) {
				modalWrapper.style.opacity = '0';
				modalWrapper.style.transform = 'scale(0.9)';
			}
			if (overlay) {
				overlay.style.opacity = '0';
				setTimeout(() => {
					overlay.style.display = 'none';
				}, 300);
			}
		}

		function renderScreen() {
			const screen = getCurrentScreen();
			if (!screen) return;

			if (headingEl) headingEl.textContent = screen.heading;
			if (overlay) overlay.setAttribute('aria-labelledby', 'modal-heading');

			if (subheadingEl) {
				if (screen.subHeading) {
					subheadingEl.textContent = screen.subHeading;
					subheadingEl.style.display = 'block';
				} else {
					subheadingEl.style.display = 'none';
				}
			}

			if (questionEl) {
				if (screen.question) {
					questionEl.textContent = screen.question;
					questionEl.style.display = 'block';
				} else {
					questionEl.style.display = 'none';
				}
			}

			if (infoContentArea) infoContentArea.style.display = 'none';
			if (optionsArea) optionsArea.style.display = 'none';
			if (textInputArea) textInputArea.style.display = 'none';

			if (screen.contentType === 'info') {
				if (infoContentArea && screen.infoContent) {
					infoContentArea.innerHTML = screen.infoContent;
					infoContentArea.style.display = 'block';
				}

				if (screen.options && screen.options.length > 0 && optionsArea && optionsList) {
					optionsArea.style.display = 'block';
					optionsList.innerHTML = '';
					screen.options.forEach((option, index) => {
						const li = document.createElement('li');
						li.style.animationDelay = `${index * 50}ms`;
						li.className = 'animate-fade-in-up';
						
						const button = document.createElement('button');
						button.textContent = option.text;
						
						const baseClasses = 'w-full rounded-lg px-3 py-2 text-left text-sm font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-opacity-50 shadow-sm hover:shadow-md active:scale-[0.98] sm:px-4 sm:py-2.5 sm:text-base';
						
						if (option.text.toLowerCase().includes('back')) {
							button.className = `${baseClasses} text-white bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 focus:ring-gray-400`;
						} else {
							button.className = `${baseClasses} text-white bg-gradient-to-r from-sky-600 to-sky-700 hover:from-sky-700 hover:to-sky-800 focus:ring-sky-500`;
						}
						
						button.onclick = () => handleOptionClick(option);
						li.appendChild(button);
						optionsList.appendChild(li);
					});
				}
			} else if (screen.contentType === 'options') {
				if (optionsArea && optionsList && screen.options) {
					optionsArea.style.display = 'block';
					optionsList.innerHTML = '';
					screen.options.forEach((option, index) => {
						const li = document.createElement('li');
						li.style.animationDelay = `${index * 50}ms`;
						li.className = 'animate-fade-in-up';
						
						const button = document.createElement('button');
						button.textContent = option.text;
						
						let baseClasses = 'w-full rounded-lg px-3 py-2 text-left text-sm font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-opacity-50 flex items-center gap-2 shadow-sm hover:shadow-md active:scale-[0.98] sm:px-4 sm:py-2.5 sm:text-base';

						if (option.action === 'openWhatsApp') {
							button.className = `${baseClasses} text-white bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 focus:ring-green-500`;

							const icon = document.createElement('img');
							icon.src = '/icons/WhatsApp.svg.webp';
							icon.alt = 'WhatsApp';
							icon.className = 'w-4 h-4 sm:w-5 sm:h-5';
							button.prepend(icon);
						} else if (option.text.toLowerCase().includes('back')) {
							button.className = `${baseClasses} text-white bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 focus:ring-gray-400`;
						} else {
							button.className = `${baseClasses} text-white bg-gradient-to-r from-sky-600 to-sky-700 hover:from-sky-700 hover:to-sky-800 focus:ring-sky-500`;
						}

						button.onclick = () => handleOptionClick(option);
						li.appendChild(button);
						optionsList.appendChild(li);
					});
				}
			} else if (screen.contentType === 'textInput') {
				if (textInputArea) textInputArea.style.display = 'block';
				if (inputLabelEl && screen.inputLabel) {
					inputLabelEl.textContent = screen.inputLabel;
					inputLabelEl.style.display = 'block';
				} else if (inputLabelEl) {
					inputLabelEl.style.display = 'none';
				}
				if (inputField && screen.inputPlaceholder) {
					inputField.placeholder = screen.inputPlaceholder;
				}
				if (inputSubmitBtn && screen.finalActionText) {
					inputSubmitBtn.textContent = screen.finalActionText;
				}
				if (inputField) inputField.value = userInput;
				updateSubmitButtonState();
			}
		}

		function handleOptionClick(option) {
			if (!option) return;
			if (option.action === 'nextScreen' && option.nextScreenId) {
				if (currentScreenId === 's2_path2') {
					selectedChallengeType = option.text;
				}
				currentScreenId = option.nextScreenId;
				userInput = '';
				if (inputField) inputField.value = '';
				renderScreen();
			} else if (option.action === 'openWhatsApp' && option.whatsappMessageTemplate) {
				openWhatsAppWithMessage(option.whatsappMessageTemplate);
			}
		}

		function handleTextInputSubmit() {
			const screen = getCurrentScreen();
			if (screen && screen.action === 'openWhatsApp' && screen.whatsappMessageTemplate) {
				userInput = inputField ? inputField.value : '';
				let message = screen.whatsappMessageTemplate
					.replace('[USER_INPUT]', userInput.trim())
					.replace('[CHALLENGE_TYPE]', selectedChallengeType || 'a specific project');
				openWhatsAppWithMessage(message);
			}
		}

		function openWhatsAppWithMessage(messageContent) {
			const encodedMessage = encodeURIComponent(messageContent);
			const whatsappLink = `https://wa.me/${WHATSAPP_PHONE_NUMBER}?text=${encodedMessage}`;
			window.open(whatsappLink, '_blank');
			closeModal();
		}

		function updateSubmitButtonState() {
			if (inputSubmitBtn && inputField) {
				const trimmedInput = inputField.value.trim();
				if (trimmedInput === '') {
					inputSubmitBtn.disabled = true;
				} else {
					inputSubmitBtn.disabled = false;
				}
			}
		}

		// Event listeners
		if (toggleBtn) {
			toggleBtn.addEventListener('click', () => {
				if (isOpen) {
					closeModal();
				} else {
					openModal();
				}
			});
		}
		
		if (closeBtn) closeBtn.addEventListener('click', closeModal);
		
		if (overlay) {
			overlay.addEventListener('click', (e) => {
				if (e.target === overlay) {
					closeModal();
				}
			});
		}
		
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && isOpen) {
				closeModal();
			}
		});

		if (inputSubmitBtn) inputSubmitBtn.addEventListener('click', handleTextInputSubmit);
		
		if (inputBackBtn) {
			inputBackBtn.addEventListener('click', () => {
				currentScreenId = 's2_path2';
				userInput = '';
				if (inputField) inputField.value = '';
				renderScreen();
			});
		}
		
		if (inputField) {
			inputField.addEventListener('input', updateSubmitButtonState);
		}

		window.addEventListener('resize', () => {
			if (isOpen) {
				positionModal();
			}
		});
	});

	// Add smooth animations
	const style = document.createElement('style');
	style.textContent = `
		@keyframes fadeInUp {
			from {
				opacity: 0;
				transform: translateY(10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}
		.animate-fade-in-up {
			animation: fadeInUp 0.1s ease-out forwards;
		}
	`;
	document.head.appendChild(style);
</script>