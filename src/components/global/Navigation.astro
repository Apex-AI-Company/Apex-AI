---
import { Image } from "astro:assets";
import { getLangFromUrl, getUrlWithoutLang, useTranslations, useTranslatedPath } from "@i18n/utils";
import { navigation } from "@/i18n/ui";


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { pathname } = Astro.url;


function isActivePage(url: string, pathname: string): boolean {
	if (url === "/" && pathname === "/") return true;
	if (url !== "/" && pathname.startsWith(url)) return true;
	return false;
}
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-gray-100 shadow-sm">
	<div class="container mx-auto px-6">
		<div class="flex items-center justify-between h-16">
			<!-- Logo -->
			<a href={translatePath("/")} aria-label="Home" class="flex items-center">
				<Image
					src="/logo-header.png"
					alt="ApexAI Logo"
					width={120}
					height={40}
					class="h-10 w-auto transition-all duration-300"
				/>
			</a>

			<!-- Desktop Navigation -->
			<nav class="hidden lg:flex items-center space-x-8" data-navbar>
				{navigation.main.map((item) => (
					<div class="relative nav-item" data-nav-item>
						<a
							href={translatePath(item.url)}
							class={`nav-link flex items-center space-x-1 px-4 py-2 rounded-full text-gray-700 hover:text-sky-600 transition-colors duration-200 ${
								isActivePage(item.url, pathname) ? 'active-page' : ''
							}`}
							data-nav-link
						>
							<span class="font-medium">{item.title}</span>
							{item.hasDropdown && (
								<svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
							)}
						</a>
					</div>
				))}
			</nav>

			<!-- Contact Button -->
			<a
				href={translatePath("/contact/")}
				class="bg-sky-600 text-white px-6 py-2 hidden lg:flex rounded-full hover:bg-sky-700 transition-colors duration-200 font-medium"
			>
				{t("contacts")}
			</a>

			<!-- Mobile Menu Button -->
			<button
				class="lg:hidden flex items-center justify-center w-10 h-10 rounded-md hover:bg-gray-100 transition-colors duration-200"
				data-mobile-menu-toggle
				aria-label="Toggle mobile menu"
			>
				<svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path></svg>
			</button>
		</div>

		<!-- Mobile Navigation -->
		<div class="lg:hidden mobile-menu hidden" data-mobile-menu>
			<div class="py-4 border-t border-gray-100 max-h-[60vh] overflow-y-auto">
				{navigation.main.map((item) => (
					<div class="mobile-nav-item">
						<div class="flex items-center justify-between">
							<a
								href={translatePath(item.url)}
								class={`flex-1 px-4 py-3 text-gray-700 hover:text-sky-600 hover:bg-gray-50 transition-colors duration-200 ${
									isActivePage(item.url, pathname) ? 'text-sky-600 bg-sky-50' : ''
								}`}
							>
								{item.title}
							</a>
							{item.hasDropdown && item.megaMenu && (
								<button
									class="px-4 py-3 text-gray-500 hover:text-sky-600 transition-colors duration-200"
									data-mobile-dropdown-toggle={`mobile-dropdown-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
									aria-label={`Toggle ${item.title} submenu`}
								>
									<svg class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
									</svg>
								</button>
							)}
						</div>
						{item.hasDropdown && item.megaMenu && (
							<div
								class="mobile-dropdown hidden overflow-hidden transition-all duration-300 ease-in-out"
								data-mobile-dropdown={`mobile-dropdown-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
							>
								<div class="ml-4 border-l border-gray-200 pl-4 py-2">
									{item.megaMenu.columns.map((column) => (
										<div class="mb-4">
											<div class="font-medium text-gray-900 text-sm mb-2 px-2">{column.title}</div>
											{column.links.map((link) => (
												<a
													href={translatePath(link.url)}
													class="block py-2 px-2 text-sm text-gray-600 hover:text-sky-600 hover:bg-gray-50 rounded transition-colors duration-200"
												>
													<div class="font-medium">{link.title}</div>
													<div class="text-xs text-gray-500 mt-1">{link.description}</div>
												</a>
											))}
										</div>
									))}
								</div>
							</div>
						)}
					</div>
				))}
				<div class="px-4 py-3 border-t border-gray-100 mt-4">
					<a
						href={translatePath("/contact/")}
						class="block w-full text-center bg-sky-600 text-white py-3 rounded-lg hover:bg-sky-700 transition-colors duration-200 font-medium"
					>
						{t("contacts")}
					</a>
				</div>
			</div>
		</div>
	</div>

	<!-- Full Width Mega Menu Container -->
	<div class="mega-menu-container hidden lg:block" data-mega-menu-container>
		{navigation.main.map((item) => (
			item.hasDropdown && item.megaMenu && (
				<div
					class="mega-menu absolute top-full left-0 right-0 w-full opacity-0 invisible transition-all duration-300 ease-out transform translate-y-2"
					data-mega-menu={`mega-menu-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
				>
					<div class="bg-white shadow-xl border-t border-gray-100">
						<div class="container mx-auto px-6 py-12">
							<!-- Header section with title and description -->
							<div class="text-center mb-8">
								<h2 class="text-2xl font-bold text-gray-900 mb-2">
									{item.title === 'Services' ? 'AI-Powered Platforms to Automate, Analyze & Accelerate Growth' :
									 item.title === 'Projects' ? 'Showcasing Our Innovations: Real-World AI Solutions' :
									 'Building a Unified Intelligent Ecosystem for People, Agents, and Robots'}
								</h2>
							</div>

							<div class="grid gap-12" style={`grid-template-columns: repeat(${item.megaMenu.columns.length}, 1fr);`}>
								{item.megaMenu.columns.map((column) => (
									<div class="space-y-6">
										<h3 class="font-semibold text-gray-900 text-sm uppercase tracking-wide mb-6">
											{column.title}
										</h3>
										<ul class="space-y-4">
											{column.links.map((link) => (
												<li>
													<a
														href={translatePath(link.url)}
														class="group block p-3 rounded-lg hover:bg-gray-50 transition-colors duration-200"
													>
														<div class="flex items-start space-x-3">
															<div class="flex-shrink-0 w-8 h-8 bg-sky-100 rounded-lg flex items-center justify-center">
																<svg class="w-4 h-4 text-sky-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
																</svg>
															</div>
															<div class="flex-1">
																<div class="font-medium text-gray-900 group-hover:text-sky-600 transition-colors duration-200">
																	{link.title}
																</div>
																<div class="text-sm text-gray-500 mt-1">
																	{link.description}
																</div>
															</div>
														</div>
													</a>
												</li>
											))}
										</ul>
									</div>
								))}
							</div>
						</div>
					</div>
				</div>
			)
		))}
	</div>
</header>

<script>

	document.addEventListener('DOMContentLoaded', function() {
		const navbar = document.querySelector('[data-navbar]');
		const navItems = document.querySelectorAll('[data-nav-item]');
		const navLinks = document.querySelectorAll('[data-nav-link]');
		const mobileMenuToggle = document.querySelector('[data-mobile-menu-toggle]');
		const mobileMenu = document.querySelector('[data-mobile-menu]');
		const megaMenuContainer = document.querySelector('[data-mega-menu-container]');

		let currentHoveredItem = null;
		let activeTimeout = null;


		navItems.forEach((item, index) => {
			const link = item.querySelector('[data-nav-link]');
			const titleElement = link.querySelector('span');
			const title = titleElement ? titleElement.textContent.trim().toLowerCase().replace(/\s+/g, '-') : '';
			const megaMenu = document.querySelector(`[data-mega-menu="mega-menu-${title}"]`);
			const chevron = item.querySelector('a[data-nav-link] > svg');

			item.addEventListener('mouseenter', function() {
				currentHoveredItem = item;


				if (megaMenu) {

					document.querySelectorAll('.mega-menu').forEach(menu => {
						if (menu !== megaMenu) {
							menu.style.opacity = '0';
							menu.style.visibility = 'hidden';
							menu.style.transform = 'translateY(10px)';
						}
					});


					megaMenu.style.opacity = '1';
					megaMenu.style.visibility = 'visible';
					megaMenu.style.transform = 'translateY(0)';


					if (chevron) {
						chevron.style.transform = 'rotate(180deg)';
					}
				}
			});

			item.addEventListener('mouseleave', function() {

				activeTimeout = setTimeout(() => {
					if (currentHoveredItem === item) {
						if (megaMenu) {
							megaMenu.style.opacity = '0';
							megaMenu.style.visibility = 'hidden';
							megaMenu.style.transform = 'translateY(10px)';
						}


						if (chevron) {
							chevron.style.transform = 'rotate(0deg)';
						}

						currentHoveredItem = null;
					}
				}, 100);
			});


			if (megaMenu) {
				megaMenu.addEventListener('mouseenter', function() {
					if (activeTimeout) {
						clearTimeout(activeTimeout);
					}
				});

				megaMenu.addEventListener('mouseleave', function() {
					megaMenu.style.opacity = '0';
					megaMenu.style.visibility = 'hidden';
					megaMenu.style.transform = 'translateY(10px)';

					if (chevron) {
						chevron.style.transform = 'rotate(0deg)';
					}
					currentHoveredItem = null;
				});
			}
		});


		if (mobileMenuToggle && mobileMenu) {
			mobileMenuToggle.addEventListener('click', function() {
				mobileMenu.classList.toggle('hidden');
			});
		}


		const mobileDropdownToggles = document.querySelectorAll('[data-mobile-dropdown-toggle]');
		mobileDropdownToggles.forEach(toggle => {
			toggle.addEventListener('click', function() {
				const targetId = this.getAttribute('data-mobile-dropdown-toggle');
				const dropdown = document.querySelector(`[data-mobile-dropdown="${targetId}"]`);
				const chevron = this.querySelector('svg');

				if (dropdown) {
					const isHidden = dropdown.classList.contains('hidden');


					document.querySelectorAll('.mobile-dropdown').forEach(dd => {
						if (dd !== dropdown) {
							dd.classList.add('hidden');
							dd.style.maxHeight = '0';
						}
					});


					document.querySelectorAll('[data-mobile-dropdown-toggle] svg').forEach(ch => {
						if (ch !== chevron) {
							ch.style.transform = 'rotate(0deg)';
						}
					});

					if (isHidden) {
						dropdown.classList.remove('hidden');
						dropdown.style.maxHeight = dropdown.scrollHeight + 'px';
						chevron.style.transform = 'rotate(180deg)';
					} else {
						dropdown.style.maxHeight = '0';
						chevron.style.transform = 'rotate(0deg)';
						setTimeout(() => {
							dropdown.classList.add('hidden');
						}, 300);
					}
				}
			});
		});
	});
</script>

<style>
	body {
		padding-top: 5rem;
	}

	.nav-link.active-page {
		background-color: #eff6ff;
		color: #2563eb;
	}

	.mega-menu-container {
		position: relative;
	}

	.mega-menu {
		transform: translateY(10px);
		z-index: 1000;
	}

	.mobile-dropdown {
		max-height: 0;
		overflow: hidden;
		transition: max-height 0.3s ease-in-out;
	}

	.mobile-dropdown.show {
		max-height: 500px;
	}

	.mobile-menu {
		animation: slideDown 0.3s ease-out;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.nav-link,
	.mega-menu,
	.mobile-dropdown {
		transition: all 0.3s ease-out;
	}

	.nav-link svg {
		transition: transform 0.2s ease-in-out;
	}

	@media (max-width: 1024px) {
		body {
			padding-top: 4rem;
		}
	}


	.mega-menu-container .mega-menu {
		box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
	}
</style>
