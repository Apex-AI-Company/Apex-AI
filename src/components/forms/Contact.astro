---
import Title from "@components/global/Title.astro";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<section class="isolate px-6 py-24 sm:py-32 lg:px-8">
	<div class="absolute inset-x-0 top-[-10rem] transform-gpu overflow-hidden blur-3xl sm:top-[-20rem]" aria-hidden="true">
		<div class="gradient-element"></div>
	</div>
	<div class="mx-auto">
		<Title class="pb-10 pt-20 uppercase" title={t("contact.title")} subtitle={t("contact.subtitle")} />
		<div class="mx-auto max-w-2xl text-lg leading-8 text-gray-600">
			<p>For one to one chat you can contact our lead operations, <a class="font-bold" href="https://www.linkedin.com/in/rohitkshirsagar19/">Rohit Kshirsagar</a> at <a class="font-bold" href="mailto:rohitkshirsagar@apexai.company">rohitkshirsagar@apexai.company</a></p>
		</div>

        <!-- Error message container -->
        <div id="error-message" class="mx-auto max-w-2xl pt-6 hidden">
            <p class="rounded-md bg-red-100 p-4 text-red-700"></p>
        </div>

        <!-- Success message container -->
        <div id="success-message" class="mx-auto max-w-2xl pt-6 hidden">
            <p class="rounded-md bg-green-100 p-4 text-green-700">Form has been submitted successfully, we will be back to you soon.</p>
        </div>

        <!-- Loading indicator -->
        <div id="loading-message" class="mx-auto max-w-2xl pt-6 hidden">
            <p class="rounded-md bg-blue-100 p-4 text-blue-700">Submitting form...</p>
        </div>

		<form id="contact-form" class="mx-auto max-w-2xl pt-12 lg:pt-20">
			<div class="grid grid-cols-1 gap-x-8 gap-y-6 sm:grid-cols-2">
				<div class="form-field sm:col-span-2">
					<label for="name" class="form-label">{t("contact.name")}*</label>
					<input type="text" name="name" id="name" autocomplete="given-name" required />
                    <p id="name-error" class="mt-1 text-sm text-red-600 hidden"></p>
				</div>
				<div class="form-field sm:col-span-2">
					<label for="email" class="form-label">{t("contact.email")}*</label>
					<input type="email" name="email" id="email" autocomplete="email" required />
                    <p id="email-error" class="mt-1 text-sm text-red-600 hidden"></p>
				</div>
				<div class="form-field sm:col-span-2">
					<label for="company" class="form-label">{t("contact.company")}</label>
					<input type="text" name="company" id="company" autocomplete="organization" />
                    <p id="company-error" class="mt-1 text-sm text-red-600 hidden"></p>
				</div>
				<div class="form-field sm:col-span-2">
					<label for="message" class="form-label">{t("contact.message")}*</label>
					<textarea name="message" id="message" rows="4" required></textarea>
                    <p id="message-error" class="mt-1 text-sm text-red-600 hidden"></p>
				</div>
				<div class="flex gap-x-4 sm:col-span-2">
					<label class="text-sm leading-6 text-gray-600" id="switch-1-label">
						{t("contact.agree")}
						<a href={translatePath("/privacy", lang)} class="font-semibold text-slate-800">privacy policy</a>.
					</label>
				</div>
			</div>
			<div class="flex pt-10">
				<div class="squircle-bg rounded-lg bg-zinc-900">
					<button
						type="submit"
						id="submit-btn"
						class="flex h-10 w-full max-w-52 flex-1 items-center justify-center px-4 py-2 text-xl text-slate-200 transition-all hover:text-white sm:w-auto md:font-bold lg:h-10">
						{t("contact.send")}
					</button>
				</div>
			</div>
		</form>
	</div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');
    const loadingMessage = document.getElementById('loading-message');
    
    const API_ENDPOINT = 'https://sheetdb.io/api/v1/7ws6bnsbr6cbk';
    
    function clearMessages() {
        errorMessage.classList.add('hidden');
        successMessage.classList.add('hidden');
        loadingMessage.classList.add('hidden');
        
        ['name', 'email', 'company', 'message'].forEach(field => {
            const errorEl = document.getElementById(`${field}-error`);
            if (errorEl) {
                errorEl.classList.add('hidden');
                errorEl.textContent = '';
            }
        });
    }
    
    function showError(message) {
        errorMessage.querySelector('p').textContent = message;
        errorMessage.classList.remove('hidden');
    }
    
    function showFieldError(field, message) {
        const errorEl = document.getElementById(`${field}-error`);
        if (errorEl) {
            errorEl.textContent = message;
            errorEl.classList.remove('hidden');
        }
    }
    
    function validateForm(formData) {
        const errors = {};
        
        if (!formData.get('name')?.toString().trim()) {
            errors.name = 'Name is required';
        }
        
        const email = formData.get('email')?.toString().trim();
        if (!email) {
            errors.email = 'Email is required';
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            errors.email = 'Please enter a valid email address';
        }
        
        if (!formData.get('message')?.toString().trim()) {
            errors.message = 'Message is required';
        }
        
        return errors;
    }

	const now = new Date();

	const formattedDate = new Intl.DateTimeFormat('en-GB', {
		day: '2-digit',
		month: 'short',
		year: 'numeric',
		hour: '2-digit',
		minute: '2-digit',
		second: '2-digit',
		hour12: false,
	}).format(now);
    
    // Submit form
    async function submitForm(formData) {
        try {
            const response = await fetch(API_ENDPOINT, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    Name: formData.get('name'),
                    Email: formData.get('email'),
                    Company: formData.get('company') || '',
                    Message: formData.get('message'),
					SubmittedAt: formattedDate,
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            return result;
        } catch (error) {
            console.error('Form submission error:', error);
            throw error;
        }
    }
    
    // Handle form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        clearMessages();
        
        const formData = new FormData(form);
        
        // Client-side validation
        const validationErrors = validateForm(formData);
        if (Object.keys(validationErrors).length > 0) {
            Object.entries(validationErrors).forEach(([field, message]) => {
                showFieldError(field, message);
            });
            return;
        }
        
        // Show loading state
        loadingMessage.classList.remove('hidden');
        submitBtn.disabled = true;
        submitBtn.textContent = 'Sending...';
        
        try {
            await submitForm(formData);
            
            // Show success message
            loadingMessage.classList.add('hidden');
            successMessage.classList.remove('hidden');
            
            // Reset form
            form.reset();
            
        } catch (error) {
            loadingMessage.classList.add('hidden');
            showError('There was an error submitting the form. Please try again or contact us directly.');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Send'; // Replace with actual translation if needed
        }
    });
});
</script>

<style>
	.gradient-element {
		@apply relative left-1/2 -z-10 aspect-[1155/678] w-[36.125rem] max-w-none -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-40rem)] sm:w-[72.1875rem];
		clip-path: polygon(
			74.1% 44.1%,
			100% 61.6%,
			97.5% 26.9%,
			85.5% 0.1%,
			80.7% 2%,
			72.5% 32.5%,
			60.2% 62.4%,
			52.4% 68.1%,
			47.5% 58.3%,
			45.2% 34.5%,
			27.5% 76.7%,
			0.1% 64.9%,
			17.9% 100%,
			27.6% 76.8%,
			76.1% 97.7%,
			74.1% 44.1%
		);
	}

	.form-field {
		@apply block;
	}

	.form-label {
		@apply flex pl-1 text-sm font-semibold leading-6 text-gray-900;
	}

	input,
	textarea {
		@apply pointer-events-auto relative m-0 w-full cursor-text rounded-lg border-0 bg-slate-200 px-5 py-2 text-xl font-normal not-italic outline-none placeholder:text-gray-400 focus:ring-slate-500;
	}
</style>